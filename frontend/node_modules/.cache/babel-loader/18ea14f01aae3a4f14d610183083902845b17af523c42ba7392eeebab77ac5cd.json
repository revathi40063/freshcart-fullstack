{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('freshcart_user') || 'null');\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ================== Auth API ==================\nexport const authAPI = {\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error('Login error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Server error during login'\n      };\n    }\n  },\n  register: async (name, email, password, phone) => {\n    try {\n      const response = await api.post('/auth/register', {\n        name,\n        email,\n        password,\n        phone\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Register error:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Server error during registration'\n      };\n    }\n  },\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response6$data;\n      console.error('Get profile error:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error);\n      return {\n        success: false,\n        message: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Server error while fetching profile'\n      };\n    }\n  }\n};\n\n// ================== Products API ==================\nexport const productsAPI = {\n  getProducts: async (filters = {}) => {\n    try {\n      const response = await api.get('/products', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      console.error('Get products error:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error);\n      return {\n        success: false,\n        products: [],\n        total: 0\n      };\n    }\n  },\n  getProductById: async id => {\n    try {\n      const response = await api.get(`/products/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      console.error('Get product error:', ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error);\n      return {\n        success: false,\n        product: null\n      };\n    }\n  },\n  getCategories: async () => {\n    try {\n      const response = await api.get('/categories');\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      console.error('Get categories error:', ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error);\n      return {\n        success: false,\n        categories: []\n      };\n    }\n  }\n};\n\n// ================== Cart API ==================\nexport const cartAPI = {\n  addToCart: async (productId, quantity) => {\n    try {\n      const response = await api.post('/cart/add', {\n        productId,\n        quantity\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response0;\n      console.error('Add to cart error:', ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || error);\n      return {\n        success: false\n      };\n    }\n  },\n  removeFromCart: async productId => {\n    try {\n      const response = await api.delete(`/cart/remove/${productId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      console.error('Remove from cart error:', ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error);\n      return {\n        success: false\n      };\n    }\n  },\n  getCart: async () => {\n    try {\n      const response = await api.get('/cart');\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      console.error('Get cart error:', ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error);\n      return {\n        success: false,\n        items: []\n      };\n    }\n  }\n};\n\n// ================== Orders API ==================\nexport const orderAPI = {\n  createOrder: async orderData => {\n    try {\n      const response = await api.post('/orders', orderData);\n      return response.data;\n    } catch (error) {\n      var _error$response11;\n      console.error('Create order error:', ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error);\n      return {\n        success: false,\n        order: null\n      };\n    }\n  },\n  getOrders: async () => {\n    try {\n      const response = await api.get('/orders');\n      return response.data;\n    } catch (error) {\n      var _error$response12;\n      console.error('Get orders error:', ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || error);\n      return {\n        success: false,\n        orders: []\n      };\n    }\n  }\n};\n\n// ================== Payment API ==================\nexport const paymentAPI = {\n  processPayment: async paymentData => {\n    try {\n      const response = await api.post('/payment/process', paymentData);\n      return response.data;\n    } catch (error) {\n      var _error$response13;\n      console.error('Payment error:', ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error);\n      return {\n        success: false,\n        transactionId: null,\n        status: 'failed'\n      };\n    }\n  }\n};\nexport default api;\n\n/*import axios from 'axios';\r\n\r\n// Base URL for API - replace with your backend URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('freshcart_user') || 'null');\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Demo data for development\r\nconst DEMO_PRODUCTS = [\r\n  {\r\n    id: 1,\r\n    name: 'Fresh Apples',\r\n    price: 2.99,\r\n    image: 'https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?w=400&h=300&fit=crop',\r\n    description: 'Crisp and juicy red apples, perfect for snacking or baking.',\r\n    category: 'fruits',\r\n    stock: 50,\r\n    rating: 4.5\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Organic Bananas',\r\n    price: 1.99,\r\n    image: 'https://images.unsplash.com/photo-1571771894821-ce9b6c11a08e?w=400&h=300&fit=crop',\r\n    description: 'Sweet and creamy organic bananas, rich in potassium.',\r\n    category: 'fruits',\r\n    stock: 30,\r\n    rating: 4.3\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Fresh Carrots',\r\n    price: 1.49,\r\n    image: 'https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?w=400&h=300&fit=crop',\r\n    description: 'Crunchy and nutritious carrots, great for cooking or snacking.',\r\n    category: 'vegetables',\r\n    stock: 40,\r\n    rating: 4.2\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Green Lettuce',\r\n    price: 2.49,\r\n    image: 'https://images.unsplash.com/photo-1622206151226-18ca2c9ab4a1?w=400&h=300&fit=crop',\r\n    description: 'Fresh green lettuce leaves, perfect for salads and sandwiches.',\r\n    category: 'vegetables',\r\n    stock: 25,\r\n    rating: 4.0\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Whole Milk',\r\n    price: 3.99,\r\n    image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=400&h=300&fit=crop',\r\n    description: 'Fresh whole milk, rich and creamy for your daily needs.',\r\n    category: 'dairy',\r\n    stock: 20,\r\n    rating: 4.4\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Fresh Bread',\r\n    price: 2.79,\r\n    image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=400&h=300&fit=crop',\r\n    description: 'Artisan bread baked fresh daily, perfect for breakfast.',\r\n    category: 'bakery',\r\n    stock: 15,\r\n    rating: 4.6\r\n  }\r\n];\r\n\r\nconst DEMO_CATEGORIES = [\r\n  { id: 'fruits', name: 'Fruits', image: 'https://images.unsplash.com/photo-1610832958506-aa56368176cf?w=300&h=200&fit=crop' },\r\n  { id: 'vegetables', name: 'Vegetables', image: 'https://images.unsplash.com/photo-1540420773420-3366772f4999?w=300&h=200&fit=crop' },\r\n  { id: 'dairy', name: 'Dairy', image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=300&h=200&fit=crop' },\r\n  { id: 'bakery', name: 'Bakery', image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=300&h=200&fit=crop' }\r\n];\r\n\r\n// API Functions\r\nexport const authAPI = {\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      return response.data;\r\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        user: {\r\n          id: 1,\r\n          name: 'Demo User',\r\n          email: email,\r\n          token: 'demo_token_123'\r\n        }\r\n      };\r\n    }*/\n/*\r\n   catch (error) {\r\n     console.error('Login error:', error.response?.data || error);\r\n     return {\r\n       success: false,\r\n       message: error.response?.data?.message || 'Server error during login'\r\n     };\r\n   }\r\n   \r\n},\r\n register: async (name, email, password) => {\r\n try {\r\n   const response = await api.post('/auth/register', { name, email, password });\r\n   return response.data;\r\n } /*catch (error) {\r\n   // For demo purposes, return mock data\r\n   return {\r\n     success: true,\r\n     user: {\r\n       id: 1,\r\n       name: name,\r\n       email: email,\r\n       token: 'demo_token_123'\r\n     }\r\n   };\r\n }*/\n/*catch (error) {\r\n  console.error('Register error:', error.response?.data || error);\r\n  return {\r\n    success: false,\r\n    message: error.response?.data?.message || 'Server error during registration'\r\n  };\r\n}    \r\n},*/\n/*\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get('/auth/profile');\r\n      return response.data;\r\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        id: 1,\r\n        name: 'Demo User',\r\n        email: 'demo@example.com',\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n    }*/ /*\r\n        catch (error) {\r\n         console.error('Get profile error:', error.response?.data || error);\r\n         return {\r\n           success: false,\r\n           message: error.response?.data?.message || 'Server error while fetching profile'\r\n         };\r\n        }       \r\n        }\r\n        };\r\n        export const productsAPI = {\r\n        getProducts: async (filters = {}) => {\r\n        try {\r\n        const response = await api.get('/products', { params: filters });\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return mock data\r\n        let products = [...DEMO_PRODUCTS];\r\n        \n        if (filters.category) {\r\n         products = products.filter(p => p.category === filters.category);\r\n        }\r\n        \n        if (filters.search) {\r\n         products = products.filter(p => \r\n           p.name.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n           p.description.toLowerCase().includes(filters.search.toLowerCase())\r\n         );\r\n        }\r\n        \n        return {\r\n         success: true,\r\n         products,\r\n         total: products.length\r\n        };\r\n        }\r\n        },\r\n        getProductById: async (id) => {\r\n        try {\r\n        const response = await api.get(`/products/${id}`);\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return mock data\r\n        const product = DEMO_PRODUCTS.find(p => p.id === parseInt(id));\r\n        return {\r\n         success: true,\r\n         product: product || null\r\n        };\r\n        }\r\n        },\r\n        getCategories: async () => {\r\n        try {\r\n        const response = await api.get('/categories');\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return mock data\r\n        return {\r\n         success: true,\r\n         categories: DEMO_CATEGORIES\r\n        };\r\n        }\r\n        }\r\n        };\r\n        export const cartAPI = {\r\n        addToCart: async (productId, quantity) => {\r\n        try {\r\n        const response = await api.post('/cart/add', { productId, quantity });\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return success\r\n        return { success: true };\r\n        }\r\n        },\r\n        removeFromCart: async (productId) => {\r\n        try {\r\n        const response = await api.delete(`/cart/remove/${productId}`);\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return success\r\n        return { success: true };\r\n        }\r\n        },\r\n        getCart: async () => {\r\n        try {\r\n        const response = await api.get('/cart');\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return empty cart\r\n        return {\r\n         success: true,\r\n         items: []\r\n        };\r\n        }\r\n        }\r\n        };\r\n        export const orderAPI = {\r\n        createOrder: async (orderData) => {\r\n        try {\r\n        const response = await api.post('/orders', orderData);\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return mock order\r\n        return {\r\n         success: true,\r\n         order: {\r\n           id: Math.random().toString(36).substr(2, 9),\r\n           status: 'pending',\r\n           total: orderData.total,\r\n           items: orderData.items\r\n         }\r\n        };\r\n        }\r\n        },\r\n        getOrders: async () => {\r\n        try {\r\n        const response = await api.get('/orders');\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, return mock orders\r\n        return {\r\n         success: true,\r\n         orders: [\r\n           {\r\n             id: 'ORD001',\r\n             date: '2024-01-15',\r\n             status: 'delivered',\r\n             total: 45.99,\r\n             items: 3\r\n           },\r\n           {\r\n             id: 'ORD002',\r\n             date: '2024-01-10',\r\n             status: 'shipped',\r\n             total: 32.50,\r\n             items: 2\r\n           }\r\n         ]\r\n        };\r\n        }\r\n        }\r\n        };\r\n        export const paymentAPI = {\r\n        processPayment: async (paymentData) => {\r\n        try {\r\n        const response = await api.post('/payment/process', paymentData);\r\n        return response.data;\r\n        } catch (error) {\r\n        // For demo purposes, simulate payment processing\r\n        return new Promise((resolve) => {\r\n         setTimeout(() => {\r\n           resolve({\r\n             success: true,\r\n             transactionId: 'TXN_' + Math.random().toString(36).substr(2, 9),\r\n             status: 'completed'\r\n           });\r\n         }, 2000);\r\n        });\r\n        }\r\n        }\r\n        };\r\n        export default api;*/","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","error","Promise","reject","authAPI","login","email","password","response","post","data","_error$response","_error$response2","_error$response2$data","console","success","message","register","name","phone","_error$response3","_error$response4","_error$response4$data","getProfile","get","_error$response5","_error$response6","_error$response6$data","productsAPI","getProducts","filters","params","_error$response7","products","total","getProductById","id","_error$response8","product","getCategories","_error$response9","categories","cartAPI","addToCart","productId","quantity","_error$response0","removeFromCart","delete","_error$response1","getCart","_error$response10","items","orderAPI","createOrder","orderData","_error$response11","order","getOrders","_error$response12","orders","paymentAPI","processPayment","paymentData","_error$response13","transactionId","status"],"sources":["C:/Users/medis/OneDrive/Desktop/CICD_Project/CICD-FreshCart/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('freshcart_user') || 'null');\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ================== Auth API ==================\r\nexport const authAPI = {\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error);\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || 'Server error during login'\r\n      };\r\n    }\r\n  },\r\n\r\n  register: async (name, email, password, phone) => {\r\n    try {\r\n      const response = await api.post('/auth/register', { name, email, password, phone });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Register error:', error.response?.data || error);\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || 'Server error during registration'\r\n      };\r\n    }\r\n  },\r\n\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get('/auth/profile');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get profile error:', error.response?.data || error);\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.message || 'Server error while fetching profile'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// ================== Products API ==================\r\nexport const productsAPI = {\r\n  getProducts: async (filters = {}) => {\r\n    try {\r\n      const response = await api.get('/products', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get products error:', error.response?.data || error);\r\n      return { success: false, products: [], total: 0 };\r\n    }\r\n  },\r\n\r\n  getProductById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/products/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get product error:', error.response?.data || error);\r\n      return { success: false, product: null };\r\n    }\r\n  },\r\n\r\n  getCategories: async () => {\r\n    try {\r\n      const response = await api.get('/categories');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get categories error:', error.response?.data || error);\r\n      return { success: false, categories: [] };\r\n    }\r\n  }\r\n};\r\n\r\n// ================== Cart API ==================\r\nexport const cartAPI = {\r\n  addToCart: async (productId, quantity) => {\r\n    try {\r\n      const response = await api.post('/cart/add', { productId, quantity });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Add to cart error:', error.response?.data || error);\r\n      return { success: false };\r\n    }\r\n  },\r\n\r\n  removeFromCart: async (productId) => {\r\n    try {\r\n      const response = await api.delete(`/cart/remove/${productId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Remove from cart error:', error.response?.data || error);\r\n      return { success: false };\r\n    }\r\n  },\r\n\r\n  getCart: async () => {\r\n    try {\r\n      const response = await api.get('/cart');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get cart error:', error.response?.data || error);\r\n      return { success: false, items: [] };\r\n    }\r\n  }\r\n};\r\n\r\n// ================== Orders API ==================\r\nexport const orderAPI = {\r\n  createOrder: async (orderData) => {\r\n    try {\r\n      const response = await api.post('/orders', orderData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Create order error:', error.response?.data || error);\r\n      return { success: false, order: null };\r\n    }\r\n  },\r\n\r\n  getOrders: async () => {\r\n    try {\r\n      const response = await api.get('/orders');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get orders error:', error.response?.data || error);\r\n      return { success: false, orders: [] };\r\n    }\r\n  }\r\n};\r\n\r\n// ================== Payment API ==================\r\nexport const paymentAPI = {\r\n  processPayment: async (paymentData) => {\r\n    try {\r\n      const response = await api.post('/payment/process', paymentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Payment error:', error.response?.data || error);\r\n      return { success: false, transactionId: null, status: 'failed' };\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n\r\n\r\n\r\n/*import axios from 'axios';\r\n\r\n// Base URL for API - replace with your backend URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('freshcart_user') || 'null');\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Demo data for development\r\nconst DEMO_PRODUCTS = [\r\n  {\r\n    id: 1,\r\n    name: 'Fresh Apples',\r\n    price: 2.99,\r\n    image: 'https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?w=400&h=300&fit=crop',\r\n    description: 'Crisp and juicy red apples, perfect for snacking or baking.',\r\n    category: 'fruits',\r\n    stock: 50,\r\n    rating: 4.5\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Organic Bananas',\r\n    price: 1.99,\r\n    image: 'https://images.unsplash.com/photo-1571771894821-ce9b6c11a08e?w=400&h=300&fit=crop',\r\n    description: 'Sweet and creamy organic bananas, rich in potassium.',\r\n    category: 'fruits',\r\n    stock: 30,\r\n    rating: 4.3\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Fresh Carrots',\r\n    price: 1.49,\r\n    image: 'https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?w=400&h=300&fit=crop',\r\n    description: 'Crunchy and nutritious carrots, great for cooking or snacking.',\r\n    category: 'vegetables',\r\n    stock: 40,\r\n    rating: 4.2\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Green Lettuce',\r\n    price: 2.49,\r\n    image: 'https://images.unsplash.com/photo-1622206151226-18ca2c9ab4a1?w=400&h=300&fit=crop',\r\n    description: 'Fresh green lettuce leaves, perfect for salads and sandwiches.',\r\n    category: 'vegetables',\r\n    stock: 25,\r\n    rating: 4.0\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Whole Milk',\r\n    price: 3.99,\r\n    image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=400&h=300&fit=crop',\r\n    description: 'Fresh whole milk, rich and creamy for your daily needs.',\r\n    category: 'dairy',\r\n    stock: 20,\r\n    rating: 4.4\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Fresh Bread',\r\n    price: 2.79,\r\n    image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=400&h=300&fit=crop',\r\n    description: 'Artisan bread baked fresh daily, perfect for breakfast.',\r\n    category: 'bakery',\r\n    stock: 15,\r\n    rating: 4.6\r\n  }\r\n];\r\n\r\nconst DEMO_CATEGORIES = [\r\n  { id: 'fruits', name: 'Fruits', image: 'https://images.unsplash.com/photo-1610832958506-aa56368176cf?w=300&h=200&fit=crop' },\r\n  { id: 'vegetables', name: 'Vegetables', image: 'https://images.unsplash.com/photo-1540420773420-3366772f4999?w=300&h=200&fit=crop' },\r\n  { id: 'dairy', name: 'Dairy', image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=300&h=200&fit=crop' },\r\n  { id: 'bakery', name: 'Bakery', image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=300&h=200&fit=crop' }\r\n];\r\n\r\n// API Functions\r\nexport const authAPI = {\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      return response.data;\r\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        user: {\r\n          id: 1,\r\n          name: 'Demo User',\r\n          email: email,\r\n          token: 'demo_token_123'\r\n        }\r\n      };\r\n    }*/\r\n   /*\r\n      catch (error) {\r\n        console.error('Login error:', error.response?.data || error);\r\n        return {\r\n          success: false,\r\n          message: error.response?.data?.message || 'Server error during login'\r\n        };\r\n      }\r\n      \r\n  },\r\n\r\n  register: async (name, email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/register', { name, email, password });\r\n      return response.data;\r\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        user: {\r\n          id: 1,\r\n          name: name,\r\n          email: email,\r\n          token: 'demo_token_123'\r\n        }\r\n      };\r\n    }*/\r\n      /*catch (error) {\r\n        console.error('Register error:', error.response?.data || error);\r\n        return {\r\n          success: false,\r\n          message: error.response?.data?.message || 'Server error during registration'\r\n        };\r\n      }    \r\n  },*/\r\n/*\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get('/auth/profile');\r\n      return response.data;\r\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        id: 1,\r\n        name: 'Demo User',\r\n        email: 'demo@example.com',\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n    }*//*\r\n      catch (error) {\r\n        console.error('Get profile error:', error.response?.data || error);\r\n        return {\r\n          success: false,\r\n          message: error.response?.data?.message || 'Server error while fetching profile'\r\n        };\r\n      }       \r\n  }\r\n};\r\n\r\nexport const productsAPI = {\r\n  getProducts: async (filters = {}) => {\r\n    try {\r\n      const response = await api.get('/products', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock data\r\n      let products = [...DEMO_PRODUCTS];\r\n      \r\n      if (filters.category) {\r\n        products = products.filter(p => p.category === filters.category);\r\n      }\r\n      \r\n      if (filters.search) {\r\n        products = products.filter(p => \r\n          p.name.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n          p.description.toLowerCase().includes(filters.search.toLowerCase())\r\n        );\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        products,\r\n        total: products.length\r\n      };\r\n    }\r\n  },\r\n\r\n  getProductById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/products/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock data\r\n      const product = DEMO_PRODUCTS.find(p => p.id === parseInt(id));\r\n      return {\r\n        success: true,\r\n        product: product || null\r\n      };\r\n    }\r\n  },\r\n\r\n  getCategories: async () => {\r\n    try {\r\n      const response = await api.get('/categories');\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        categories: DEMO_CATEGORIES\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const cartAPI = {\r\n  addToCart: async (productId, quantity) => {\r\n    try {\r\n      const response = await api.post('/cart/add', { productId, quantity });\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return success\r\n      return { success: true };\r\n    }\r\n  },\r\n\r\n  removeFromCart: async (productId) => {\r\n    try {\r\n      const response = await api.delete(`/cart/remove/${productId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return success\r\n      return { success: true };\r\n    }\r\n  },\r\n\r\n  getCart: async () => {\r\n    try {\r\n      const response = await api.get('/cart');\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return empty cart\r\n      return {\r\n        success: true,\r\n        items: []\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const orderAPI = {\r\n  createOrder: async (orderData) => {\r\n    try {\r\n      const response = await api.post('/orders', orderData);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock order\r\n      return {\r\n        success: true,\r\n        order: {\r\n          id: Math.random().toString(36).substr(2, 9),\r\n          status: 'pending',\r\n          total: orderData.total,\r\n          items: orderData.items\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  getOrders: async () => {\r\n    try {\r\n      const response = await api.get('/orders');\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock orders\r\n      return {\r\n        success: true,\r\n        orders: [\r\n          {\r\n            id: 'ORD001',\r\n            date: '2024-01-15',\r\n            status: 'delivered',\r\n            total: 45.99,\r\n            items: 3\r\n          },\r\n          {\r\n            id: 'ORD002',\r\n            date: '2024-01-10',\r\n            status: 'shipped',\r\n            total: 32.50,\r\n            items: 2\r\n          }\r\n        ]\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const paymentAPI = {\r\n  processPayment: async (paymentData) => {\r\n    try {\r\n      const response = await api.post('/payment/process', paymentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, simulate payment processing\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            success: true,\r\n            transactionId: 'TXN_' + Math.random().toString(36).substr(2, 9),\r\n            status: 'completed'\r\n          });\r\n        }, 2000);\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;*/"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}