{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for API - replace with your backend URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('freshcart_user') || 'null');\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Demo data for development\nconst DEMO_PRODUCTS = [{\n  id: 1,\n  name: 'Fresh Apples',\n  price: 2.99,\n  image: 'https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?w=400&h=300&fit=crop',\n  description: 'Crisp and juicy red apples, perfect for snacking or baking.',\n  category: 'fruits',\n  stock: 50,\n  rating: 4.5\n}, {\n  id: 2,\n  name: 'Organic Bananas',\n  price: 1.99,\n  image: 'https://images.unsplash.com/photo-1571771894821-ce9b6c11a08e?w=400&h=300&fit=crop',\n  description: 'Sweet and creamy organic bananas, rich in potassium.',\n  category: 'fruits',\n  stock: 30,\n  rating: 4.3\n}, {\n  id: 3,\n  name: 'Fresh Carrots',\n  price: 1.49,\n  image: 'https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?w=400&h=300&fit=crop',\n  description: 'Crunchy and nutritious carrots, great for cooking or snacking.',\n  category: 'vegetables',\n  stock: 40,\n  rating: 4.2\n}, {\n  id: 4,\n  name: 'Green Lettuce',\n  price: 2.49,\n  image: 'https://images.unsplash.com/photo-1622206151226-18ca2c9ab4a1?w=400&h=300&fit=crop',\n  description: 'Fresh green lettuce leaves, perfect for salads and sandwiches.',\n  category: 'vegetables',\n  stock: 25,\n  rating: 4.0\n}, {\n  id: 5,\n  name: 'Whole Milk',\n  price: 3.99,\n  image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=400&h=300&fit=crop',\n  description: 'Fresh whole milk, rich and creamy for your daily needs.',\n  category: 'dairy',\n  stock: 20,\n  rating: 4.4\n}, {\n  id: 6,\n  name: 'Fresh Bread',\n  price: 2.79,\n  image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=400&h=300&fit=crop',\n  description: 'Artisan bread baked fresh daily, perfect for breakfast.',\n  category: 'bakery',\n  stock: 15,\n  rating: 4.6\n}];\nconst DEMO_CATEGORIES = [{\n  id: 'fruits',\n  name: 'Fruits',\n  image: 'https://images.unsplash.com/photo-1610832958506-aa56368176cf?w=300&h=200&fit=crop'\n}, {\n  id: 'vegetables',\n  name: 'Vegetables',\n  image: 'https://images.unsplash.com/photo-1540420773420-3366772f4999?w=300&h=200&fit=crop'\n}, {\n  id: 'dairy',\n  name: 'Dairy',\n  image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=300&h=200&fit=crop'\n}, {\n  id: 'bakery',\n  name: 'Bakery',\n  image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=300&h=200&fit=crop'\n}];\n\n// API Functions\nexport const authAPI = {\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        user: {\r\n          id: 1,\r\n          name: 'Demo User',\r\n          email: email,\r\n          token: 'demo_token_123'\r\n        }\r\n      };\r\n      }*/ catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error('Login error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Server error during login'\n      };\n    }\n  },\n  register: async (name, email, password) => {\n    try {\n      const response = await api.post('/auth/register', {\n        name,\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return mock data\n      return {\n        success: true,\n        user: {\n          id: 1,\n          name: name,\n          email: email,\n          token: 'demo_token_123'\n        }\n      };\n    } /*\r\n       catch (error) {\r\n         console.error('Register error:', error.response?.data || error);\r\n         return {\r\n           success: false,\r\n           message: error.response?.data?.message || 'Server error during registration'\r\n         };\r\n       }    */\n  },\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      return response.data;\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        id: 1,\r\n        name: 'Demo User',\r\n        email: 'demo@example.com',\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n      }*/ catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Get profile error:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Server error while fetching profile'\n      };\n    }\n  }\n};\nexport const productsAPI = {\n  getProducts: async (filters = {}) => {\n    try {\n      const response = await api.get('/products', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return mock data\n      let products = [...DEMO_PRODUCTS];\n      if (filters.category) {\n        products = products.filter(p => p.category === filters.category);\n      }\n      if (filters.search) {\n        products = products.filter(p => p.name.toLowerCase().includes(filters.search.toLowerCase()) || p.description.toLowerCase().includes(filters.search.toLowerCase()));\n      }\n      return {\n        success: true,\n        products,\n        total: products.length\n      };\n    }\n  },\n  getProductById: async id => {\n    try {\n      const response = await api.get(`/products/${id}`);\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return mock data\n      const product = DEMO_PRODUCTS.find(p => p.id === parseInt(id));\n      return {\n        success: true,\n        product: product || null\n      };\n    }\n  },\n  getCategories: async () => {\n    try {\n      const response = await api.get('/categories');\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return mock data\n      return {\n        success: true,\n        categories: DEMO_CATEGORIES\n      };\n    }\n  }\n};\nexport const cartAPI = {\n  addToCart: async (productId, quantity) => {\n    try {\n      const response = await api.post('/cart/add', {\n        productId,\n        quantity\n      });\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return success\n      return {\n        success: true\n      };\n    }\n  },\n  removeFromCart: async productId => {\n    try {\n      const response = await api.delete(`/cart/remove/${productId}`);\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return success\n      return {\n        success: true\n      };\n    }\n  },\n  getCart: async () => {\n    try {\n      const response = await api.get('/cart');\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return empty cart\n      return {\n        success: true,\n        items: []\n      };\n    }\n  }\n};\nexport const orderAPI = {\n  createOrder: async orderData => {\n    try {\n      const response = await api.post('/orders', orderData);\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return mock order\n      return {\n        success: true,\n        order: {\n          id: Math.random().toString(36).substr(2, 9),\n          status: 'pending',\n          total: orderData.total,\n          items: orderData.items\n        }\n      };\n    }\n  },\n  getOrders: async () => {\n    try {\n      const response = await api.get('/orders');\n      return response.data;\n    } catch (error) {\n      // For demo purposes, return mock orders\n      return {\n        success: true,\n        orders: [{\n          id: 'ORD001',\n          date: '2024-01-15',\n          status: 'delivered',\n          total: 45.99,\n          items: 3\n        }, {\n          id: 'ORD002',\n          date: '2024-01-10',\n          status: 'shipped',\n          total: 32.50,\n          items: 2\n        }]\n      };\n    }\n  }\n};\nexport const paymentAPI = {\n  processPayment: async paymentData => {\n    try {\n      const response = await api.post('/payment/process', paymentData);\n      return response.data;\n    } catch (error) {\n      // For demo purposes, simulate payment processing\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            success: true,\n            transactionId: 'TXN_' + Math.random().toString(36).substr(2, 9),\n            status: 'completed'\n          });\n        }, 2000);\n      });\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","error","Promise","reject","DEMO_PRODUCTS","id","name","price","image","description","category","stock","rating","DEMO_CATEGORIES","authAPI","login","email","password","response","post","data","_error$response","_error$response2","_error$response2$data","console","success","message","register","getProfile","get","_error$response3","_error$response4","_error$response4$data","productsAPI","getProducts","filters","params","products","filter","p","search","toLowerCase","includes","total","length","getProductById","product","find","parseInt","getCategories","categories","cartAPI","addToCart","productId","quantity","removeFromCart","delete","getCart","items","orderAPI","createOrder","orderData","order","Math","random","toString","substr","status","getOrders","orders","date","paymentAPI","processPayment","paymentData","resolve","setTimeout","transactionId"],"sources":["C:/Users/medis/OneDrive/Desktop/CICD_Project/CICD-FreshCart/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for API - replace with your backend URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('freshcart_user') || 'null');\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Demo data for development\r\nconst DEMO_PRODUCTS = [\r\n  {\r\n    id: 1,\r\n    name: 'Fresh Apples',\r\n    price: 2.99,\r\n    image: 'https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?w=400&h=300&fit=crop',\r\n    description: 'Crisp and juicy red apples, perfect for snacking or baking.',\r\n    category: 'fruits',\r\n    stock: 50,\r\n    rating: 4.5\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Organic Bananas',\r\n    price: 1.99,\r\n    image: 'https://images.unsplash.com/photo-1571771894821-ce9b6c11a08e?w=400&h=300&fit=crop',\r\n    description: 'Sweet and creamy organic bananas, rich in potassium.',\r\n    category: 'fruits',\r\n    stock: 30,\r\n    rating: 4.3\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Fresh Carrots',\r\n    price: 1.49,\r\n    image: 'https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?w=400&h=300&fit=crop',\r\n    description: 'Crunchy and nutritious carrots, great for cooking or snacking.',\r\n    category: 'vegetables',\r\n    stock: 40,\r\n    rating: 4.2\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Green Lettuce',\r\n    price: 2.49,\r\n    image: 'https://images.unsplash.com/photo-1622206151226-18ca2c9ab4a1?w=400&h=300&fit=crop',\r\n    description: 'Fresh green lettuce leaves, perfect for salads and sandwiches.',\r\n    category: 'vegetables',\r\n    stock: 25,\r\n    rating: 4.0\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Whole Milk',\r\n    price: 3.99,\r\n    image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=400&h=300&fit=crop',\r\n    description: 'Fresh whole milk, rich and creamy for your daily needs.',\r\n    category: 'dairy',\r\n    stock: 20,\r\n    rating: 4.4\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Fresh Bread',\r\n    price: 2.79,\r\n    image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=400&h=300&fit=crop',\r\n    description: 'Artisan bread baked fresh daily, perfect for breakfast.',\r\n    category: 'bakery',\r\n    stock: 15,\r\n    rating: 4.6\r\n  }\r\n];\r\n\r\nconst DEMO_CATEGORIES = [\r\n  { id: 'fruits', name: 'Fruits', image: 'https://images.unsplash.com/photo-1610832958506-aa56368176cf?w=300&h=200&fit=crop' },\r\n  { id: 'vegetables', name: 'Vegetables', image: 'https://images.unsplash.com/photo-1540420773420-3366772f4999?w=300&h=200&fit=crop' },\r\n  { id: 'dairy', name: 'Dairy', image: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=300&h=200&fit=crop' },\r\n  { id: 'bakery', name: 'Bakery', image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=300&h=200&fit=crop' }\r\n];\r\n\r\n// API Functions\r\nexport const authAPI = {\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      return response.data;\r\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        user: {\r\n          id: 1,\r\n          name: 'Demo User',\r\n          email: email,\r\n          token: 'demo_token_123'\r\n        }\r\n      };\r\n    }*/\r\n      catch (error) {\r\n        console.error('Login error:', error.response?.data || error);\r\n        return {\r\n          success: false,\r\n          message: error.response?.data?.message || 'Server error during login'\r\n        };\r\n      }\r\n      \r\n  },\r\n\r\n  register: async (name, email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/register', { name, email, password });\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        user: {\r\n          id: 1,\r\n          name: name,\r\n          email: email,\r\n          token: 'demo_token_123'\r\n        }\r\n      };\r\n    }/*\r\n      catch (error) {\r\n        console.error('Register error:', error.response?.data || error);\r\n        return {\r\n          success: false,\r\n          message: error.response?.data?.message || 'Server error during registration'\r\n        };\r\n      }    */\r\n  },\r\n\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get('/auth/profile');\r\n      return response.data;\r\n    } /*catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        id: 1,\r\n        name: 'Demo User',\r\n        email: 'demo@example.com',\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n    }*/\r\n      catch (error) {\r\n        console.error('Get profile error:', error.response?.data || error);\r\n        return {\r\n          success: false,\r\n          message: error.response?.data?.message || 'Server error while fetching profile'\r\n        };\r\n      }       \r\n  }\r\n};\r\n\r\nexport const productsAPI = {\r\n  getProducts: async (filters = {}) => {\r\n    try {\r\n      const response = await api.get('/products', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock data\r\n      let products = [...DEMO_PRODUCTS];\r\n      \r\n      if (filters.category) {\r\n        products = products.filter(p => p.category === filters.category);\r\n      }\r\n      \r\n      if (filters.search) {\r\n        products = products.filter(p => \r\n          p.name.toLowerCase().includes(filters.search.toLowerCase()) ||\r\n          p.description.toLowerCase().includes(filters.search.toLowerCase())\r\n        );\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        products,\r\n        total: products.length\r\n      };\r\n    }\r\n  },\r\n\r\n  getProductById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/products/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock data\r\n      const product = DEMO_PRODUCTS.find(p => p.id === parseInt(id));\r\n      return {\r\n        success: true,\r\n        product: product || null\r\n      };\r\n    }\r\n  },\r\n\r\n  getCategories: async () => {\r\n    try {\r\n      const response = await api.get('/categories');\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock data\r\n      return {\r\n        success: true,\r\n        categories: DEMO_CATEGORIES\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const cartAPI = {\r\n  addToCart: async (productId, quantity) => {\r\n    try {\r\n      const response = await api.post('/cart/add', { productId, quantity });\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return success\r\n      return { success: true };\r\n    }\r\n  },\r\n\r\n  removeFromCart: async (productId) => {\r\n    try {\r\n      const response = await api.delete(`/cart/remove/${productId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return success\r\n      return { success: true };\r\n    }\r\n  },\r\n\r\n  getCart: async () => {\r\n    try {\r\n      const response = await api.get('/cart');\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return empty cart\r\n      return {\r\n        success: true,\r\n        items: []\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const orderAPI = {\r\n  createOrder: async (orderData) => {\r\n    try {\r\n      const response = await api.post('/orders', orderData);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock order\r\n      return {\r\n        success: true,\r\n        order: {\r\n          id: Math.random().toString(36).substr(2, 9),\r\n          status: 'pending',\r\n          total: orderData.total,\r\n          items: orderData.items\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  getOrders: async () => {\r\n    try {\r\n      const response = await api.get('/orders');\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, return mock orders\r\n      return {\r\n        success: true,\r\n        orders: [\r\n          {\r\n            id: 'ORD001',\r\n            date: '2024-01-15',\r\n            status: 'delivered',\r\n            total: 45.99,\r\n            items: 3\r\n          },\r\n          {\r\n            id: 'ORD002',\r\n            date: '2024-01-10',\r\n            status: 'shipped',\r\n            total: 32.50,\r\n            items: 2\r\n          }\r\n        ]\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const paymentAPI = {\r\n  processPayment: async (paymentData) => {\r\n    try {\r\n      const response = await api.post('/payment/process', paymentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      // For demo purposes, simulate payment processing\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            success: true,\r\n            transactionId: 'TXN_' + Math.random().toString(36).substr(2, 9),\r\n            status: 'completed'\r\n          });\r\n        }, 2000);\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,MAAM,CAAC;EACzE,IAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAK,EAAE;IACtBN,MAAM,CAACJ,OAAO,CAACW,aAAa,GAAG,UAAUN,IAAI,CAACK,KAAK,EAAE;EACvD;EACA,OAAON,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMG,aAAa,GAAG,CACpB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,gFAAgF;EACvFC,WAAW,EAAE,6DAA6D;EAC1EC,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACV,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,mFAAmF;EAC1FC,WAAW,EAAE,sDAAsD;EACnEC,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACV,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,mFAAmF;EAC1FC,WAAW,EAAE,gEAAgE;EAC7EC,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACV,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,mFAAmF;EAC1FC,WAAW,EAAE,gEAAgE;EAC7EC,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACV,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,gFAAgF;EACvFC,WAAW,EAAE,yDAAyD;EACtEC,QAAQ,EAAE,OAAO;EACjBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACV,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,mFAAmF;EAC1FC,WAAW,EAAE,yDAAyD;EACtEC,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACV,CAAC,CACF;AAED,MAAMC,eAAe,GAAG,CACtB;EAAER,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,QAAQ;EAAEE,KAAK,EAAE;AAAoF,CAAC,EAC5H;EAAEH,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE,YAAY;EAAEE,KAAK,EAAE;AAAoF,CAAC,EACpI;EAAEH,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE,OAAO;EAAEE,KAAK,EAAE;AAAiF,CAAC,EACvH;EAAEH,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,QAAQ;EAAEE,KAAK,EAAE;AAAoF,CAAC,CAC7H;;AAED;AACA,OAAO,MAAMM,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhC,GAAG,CAACiC,IAAI,CAAC,aAAa,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MACnE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAXM,CAYA,OAAOnB,KAAK,EAAE;MAAA,IAAAoB,eAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACZC,OAAO,CAACvB,KAAK,CAAC,cAAc,EAAE,EAAAoB,eAAA,GAAApB,KAAK,CAACiB,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAInB,KAAK,CAAC;MAC5D,OAAO;QACLwB,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAJ,gBAAA,GAAArB,KAAK,CAACiB,QAAQ,cAAAI,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBF,IAAI,cAAAG,qBAAA,uBAApBA,qBAAA,CAAsBG,OAAO,KAAI;MAC5C,CAAC;IACH;EAEJ,CAAC;EAEDC,QAAQ,EAAE,MAAAA,CAAOrB,IAAI,EAAEU,KAAK,EAAEC,QAAQ,KAAK;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhC,GAAG,CAACiC,IAAI,CAAC,gBAAgB,EAAE;QAAEb,IAAI;QAAEU,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC5E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO;QACLwB,OAAO,EAAE,IAAI;QACb/B,IAAI,EAAE;UACJW,EAAE,EAAE,CAAC;UACLC,IAAI,EAAEA,IAAI;UACVU,KAAK,EAAEA,KAAK;UACZjB,KAAK,EAAE;QACT;MACF,CAAC;IACH,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC;EAED6B,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMhC,GAAG,CAAC2C,GAAG,CAAC,eAAe,CAAC;MAC/C,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SARM,CASA,OAAOnB,KAAK,EAAE;MAAA,IAAA6B,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACZR,OAAO,CAACvB,KAAK,CAAC,oBAAoB,EAAE,EAAA6B,gBAAA,GAAA7B,KAAK,CAACiB,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAInB,KAAK,CAAC;MAClE,OAAO;QACLwB,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAK,gBAAA,GAAA9B,KAAK,CAACiB,QAAQ,cAAAa,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,uBAApBA,qBAAA,CAAsBN,OAAO,KAAI;MAC5C,CAAC;IACH;EACJ;AACF,CAAC;AAED,OAAO,MAAMO,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IACnC,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMhC,GAAG,CAAC2C,GAAG,CAAC,WAAW,EAAE;QAAEO,MAAM,EAAED;MAAQ,CAAC,CAAC;MAChE,OAAOjB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,IAAIoC,QAAQ,GAAG,CAAC,GAAGjC,aAAa,CAAC;MAEjC,IAAI+B,OAAO,CAACzB,QAAQ,EAAE;QACpB2B,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC7B,QAAQ,KAAKyB,OAAO,CAACzB,QAAQ,CAAC;MAClE;MAEA,IAAIyB,OAAO,CAACK,MAAM,EAAE;QAClBH,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACC,CAAC,IAC1BA,CAAC,CAACjC,IAAI,CAACmC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,OAAO,CAACK,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,IAC3DF,CAAC,CAAC9B,WAAW,CAACgC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,OAAO,CAACK,MAAM,CAACC,WAAW,CAAC,CAAC,CACnE,CAAC;MACH;MAEA,OAAO;QACLhB,OAAO,EAAE,IAAI;QACbY,QAAQ;QACRM,KAAK,EAAEN,QAAQ,CAACO;MAClB,CAAC;IACH;EACF,CAAC;EAEDC,cAAc,EAAE,MAAOxC,EAAE,IAAK;IAC5B,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMhC,GAAG,CAAC2C,GAAG,CAAC,aAAaxB,EAAE,EAAE,CAAC;MACjD,OAAOa,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,MAAM6C,OAAO,GAAG1C,aAAa,CAAC2C,IAAI,CAACR,CAAC,IAAIA,CAAC,CAAClC,EAAE,KAAK2C,QAAQ,CAAC3C,EAAE,CAAC,CAAC;MAC9D,OAAO;QACLoB,OAAO,EAAE,IAAI;QACbqB,OAAO,EAAEA,OAAO,IAAI;MACtB,CAAC;IACH;EACF,CAAC;EAEDG,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAMhC,GAAG,CAAC2C,GAAG,CAAC,aAAa,CAAC;MAC7C,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO;QACLwB,OAAO,EAAE,IAAI;QACbyB,UAAU,EAAErC;MACd,CAAC;IACH;EACF;AACF,CAAC;AAED,OAAO,MAAMsC,OAAO,GAAG;EACrBC,SAAS,EAAE,MAAAA,CAAOC,SAAS,EAAEC,QAAQ,KAAK;IACxC,IAAI;MACF,MAAMpC,QAAQ,GAAG,MAAMhC,GAAG,CAACiC,IAAI,CAAC,WAAW,EAAE;QAAEkC,SAAS;QAAEC;MAAS,CAAC,CAAC;MACrE,OAAOpC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO;QAAEwB,OAAO,EAAE;MAAK,CAAC;IAC1B;EACF,CAAC;EAED8B,cAAc,EAAE,MAAOF,SAAS,IAAK;IACnC,IAAI;MACF,MAAMnC,QAAQ,GAAG,MAAMhC,GAAG,CAACsE,MAAM,CAAC,gBAAgBH,SAAS,EAAE,CAAC;MAC9D,OAAOnC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO;QAAEwB,OAAO,EAAE;MAAK,CAAC;IAC1B;EACF,CAAC;EAEDgC,OAAO,EAAE,MAAAA,CAAA,KAAY;IACnB,IAAI;MACF,MAAMvC,QAAQ,GAAG,MAAMhC,GAAG,CAAC2C,GAAG,CAAC,OAAO,CAAC;MACvC,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO;QACLwB,OAAO,EAAE,IAAI;QACbiC,KAAK,EAAE;MACT,CAAC;IACH;EACF;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG;EACtBC,WAAW,EAAE,MAAOC,SAAS,IAAK;IAChC,IAAI;MACF,MAAM3C,QAAQ,GAAG,MAAMhC,GAAG,CAACiC,IAAI,CAAC,SAAS,EAAE0C,SAAS,CAAC;MACrD,OAAO3C,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO;QACLwB,OAAO,EAAE,IAAI;QACbqC,KAAK,EAAE;UACLzD,EAAE,EAAE0D,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;UAC3CC,MAAM,EAAE,SAAS;UACjBxB,KAAK,EAAEkB,SAAS,CAAClB,KAAK;UACtBe,KAAK,EAAEG,SAAS,CAACH;QACnB;MACF,CAAC;IACH;EACF,CAAC;EAEDU,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACF,MAAMlD,QAAQ,GAAG,MAAMhC,GAAG,CAAC2C,GAAG,CAAC,SAAS,CAAC;MACzC,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO;QACLwB,OAAO,EAAE,IAAI;QACb4C,MAAM,EAAE,CACN;UACEhE,EAAE,EAAE,QAAQ;UACZiE,IAAI,EAAE,YAAY;UAClBH,MAAM,EAAE,WAAW;UACnBxB,KAAK,EAAE,KAAK;UACZe,KAAK,EAAE;QACT,CAAC,EACD;UACErD,EAAE,EAAE,QAAQ;UACZiE,IAAI,EAAE,YAAY;UAClBH,MAAM,EAAE,SAAS;UACjBxB,KAAK,EAAE,KAAK;UACZe,KAAK,EAAE;QACT,CAAC;MAEL,CAAC;IACH;EACF;AACF,CAAC;AAED,OAAO,MAAMa,UAAU,GAAG;EACxBC,cAAc,EAAE,MAAOC,WAAW,IAAK;IACrC,IAAI;MACF,MAAMvD,QAAQ,GAAG,MAAMhC,GAAG,CAACiC,IAAI,CAAC,kBAAkB,EAAEsD,WAAW,CAAC;MAChE,OAAOvD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd;MACA,OAAO,IAAIC,OAAO,CAAEwE,OAAO,IAAK;QAC9BC,UAAU,CAAC,MAAM;UACfD,OAAO,CAAC;YACNjD,OAAO,EAAE,IAAI;YACbmD,aAAa,EAAE,MAAM,GAAGb,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YAC/DC,MAAM,EAAE;UACV,CAAC,CAAC;QACJ,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AAED,eAAejF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}