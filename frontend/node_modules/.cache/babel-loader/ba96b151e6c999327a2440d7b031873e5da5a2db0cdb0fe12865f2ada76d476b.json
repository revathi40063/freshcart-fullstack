{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\medis\\\\OneDrive\\\\Desktop\\\\CICD_Project\\\\CICD-FreshCart\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing user session in localStorage\n    const savedUser = localStorage.getItem('freshcart_user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  /*const login = async (email, password) => {\r\n    try {\r\n      // Simulate API call\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n        if (response.ok) {\r\n        const userData = await response.json();\r\n        setUser(userData);\r\n        localStorage.setItem('freshcart_user', JSON.stringify(userData));\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, error: 'Invalid credentials' };\r\n      }\r\n    } catch (error) {\r\n      // For demo purposes, simulate successful login\r\n      const demoUser = {\r\n        id: 1,\r\n        name: 'Demo User',\r\n        email: email,\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n      setUser(demoUser);\r\n      localStorage.setItem('freshcart_user', JSON.stringify(demoUser));\r\n      return { success: true };\r\n    }\r\n  };\r\n    const register = async (name, email, password) => {\r\n    try {\r\n      // Simulate API call\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name, email, password }),\r\n      });\r\n        if (response.ok) {\r\n        const userData = await response.json();\r\n        setUser(userData);\r\n        localStorage.setItem('freshcart_user', JSON.stringify(userData));\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, error: 'Email already exists' };\r\n      }\r\n    } catch (error) {\r\n      // For demo purposes, simulate successful register\r\n      const demoUser = {\r\n        id: 1,\r\n        name: name,\r\n        email: email,\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n      setUser(demoUser);\r\n      localStorage.setItem('freshcart_user', JSON.stringify(demoUser));\r\n      return { success: true };\r\n    }\r\n  };*/\n  const register = async (name, email, password) => {\n    try {\n      const result = await authAPI.register(name, email, password); // <-- real API\n      if (result.success) {\n        setUser(result.user);\n        localStorage.setItem('freshcart_user', JSON.stringify(result.user));\n      }\n      return result;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error('Registration error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Server error'\n      };\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const result = await authAPI.login(email, password); // <-- real API\n      if (result.success) {\n        setUser(result.user);\n        localStorage.setItem('freshcart_user', JSON.stringify(result.user));\n      }\n      return result;\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Login error:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Server error'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('freshcart_user');\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","register","name","email","password","result","success","setItem","stringify","error","_error$response","_error$response2","_error$response2$data","console","response","data","message","login","_error$response3","_error$response4","_error$response4$data","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/medis/OneDrive/Desktop/CICD_Project/CICD-FreshCart/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for existing user session in localStorage\r\n    const savedUser = localStorage.getItem('freshcart_user');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  /*const login = async (email, password) => {\r\n    try {\r\n      // Simulate API call\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        setUser(userData);\r\n        localStorage.setItem('freshcart_user', JSON.stringify(userData));\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, error: 'Invalid credentials' };\r\n      }\r\n    } catch (error) {\r\n      // For demo purposes, simulate successful login\r\n      const demoUser = {\r\n        id: 1,\r\n        name: 'Demo User',\r\n        email: email,\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n      setUser(demoUser);\r\n      localStorage.setItem('freshcart_user', JSON.stringify(demoUser));\r\n      return { success: true };\r\n    }\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      // Simulate API call\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name, email, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        setUser(userData);\r\n        localStorage.setItem('freshcart_user', JSON.stringify(userData));\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, error: 'Email already exists' };\r\n      }\r\n    } catch (error) {\r\n      // For demo purposes, simulate successful register\r\n      const demoUser = {\r\n        id: 1,\r\n        name: name,\r\n        email: email,\r\n        avatar: 'https://via.placeholder.com/150'\r\n      };\r\n      setUser(demoUser);\r\n      localStorage.setItem('freshcart_user', JSON.stringify(demoUser));\r\n      return { success: true };\r\n    }\r\n  };*/\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      const result = await authAPI.register(name, email, password); // <-- real API\r\n      if (result.success) {\r\n        setUser(result.user);\r\n        localStorage.setItem('freshcart_user', JSON.stringify(result.user));\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Registration error:', error.response?.data || error);\r\n      return { success: false, message: error.response?.data?.message || 'Server error' };\r\n    }\r\n  };\r\n  \r\n  const login = async (email, password) => {\r\n    try {\r\n      const result = await authAPI.login(email, password); // <-- real API\r\n      if (result.success) {\r\n        setUser(result.user);\r\n        localStorage.setItem('freshcart_user', JSON.stringify(result.user));\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error);\r\n      return { success: false, message: error.response?.data?.message || 'Server error' };\r\n    }\r\n  };\r\n  \r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('freshcart_user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}